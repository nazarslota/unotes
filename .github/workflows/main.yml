name: CI

on:
  push:
    branches: [ "stage" ]
  pull_request:
    branches: [ "stage" ]

env:
  DIGITALOCEAN_REGISTRY: registry.digitalocean.com/unotes
  AUTH_IMAGE_NAME: unotes-auth
  AUTH_REPOSITORY_NAME: unotes
  AUTH_CONTAINER_NAME: unotes-auth

  NOTE_IMAGE_NAME: unotes-note
  NOTE_REPOSITORY_NAME: unotes
  NOTE_CONTAINER_NAME: unotes-note

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install doctl.
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Building auth service.
        working-directory: auth
        run: docker build -t ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.AUTH_REPOSITORY_NAME }}:${{ env.AUTH_IMAGE_NAME }}.${{ github.sha }} .
      - name: Building note service.
        working-directory: note
        run: docker build -t ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.NOTE_REPOSITORY_NAME }}:${{ env.NOTE_IMAGE_NAME }}.${{ github.sha }} .

      - name: Login to container registry.
        run: doctl registry login --expiry-seconds 600

      - name: Pushing auth service to the container registry.
        run: docker push ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.AUTH_REPOSITORY_NAME }}:${{ env.AUTH_IMAGE_NAME }}.${{ github.sha }}
      - name: Pushing note service to the container registry.
        run: docker push ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.NOTE_REPOSITORY_NAME }}:${{ env.NOTE_IMAGE_NAME }}.${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setting up "appleboy/ssh-action@v0.1.3" and deploying.
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UNOTES_DROPLET_HOST }}
          username: ${{ secrets.UNOTES_DROPLET_USERNAME }}
          password: ${{ secrets.UNOTES_DROPLET_PASSWORD }}

        script: |
          rm -r ~/auth.env && touch ~/auth.env
          echo "AUTH_ACCESS_TOKEN_SECRET=${{ secrets.AUTH_ACCESS_TOKEN_SECRET }}" >> ~/auth.env
          echo "AUTH_REFRESH_TOKEN_SECRET=${{ secrets.AUTH_REFRESH_TOKEN_SECRET }}" >> ~/auth.env
          
          echo "AUTH_POSTGRESQL_HOST=${{ secrets.AUTH_POSTGRESQL_HOST }}" >> ~/auth.env
          echo "AUTH_POSTGRESQL_PORT=${{ secrets.AUTH_POSTGRESQL_PORT }}" >> ~/auth.env
          echo "AUTH_POSTGRESQL_USERNAME=${{ secrets.AUTH_POSTGRESQL_USERNAME }}" >> ~/auth.env
          echo "AUTH_POSTGRESQL_PASSWORD=${{ secrets.AUTH_POSTGRESQL_PASSWORD }}" >> ~/auth.env
          echo "AUTH_POSTGRESQL_DBNAME=${{ secrets.AUTH_POSTGRESQL_DBNAME }}" >> ~/auth.env
          echo "AUTH_POSTGRESQL_SSLMODE=${{ secrets.AUTH_POSTGRESQL_SSLMODE }}" >> ~/auth.env
          
          echo "AUTH_REDIS_ADDR=${{ secrets.AUTH_REDIS_ADDR }}" >> ~/auth.env
          echo "AUTH_REDIS_PASSWORD=${{ secrets.AUTH_REDIS_PASSWORD }}" >> ~/auth.env
          echo "AUTH_REDIS_DB=${{ secrets.AUTH_REDIS_DB }}" >> ~/auth.env
          
          docker login ${{ env.DIGITALOCEAN_REGISTRY }} -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
          docker stop ${{ env.AUTH_CONTAINER_NAME }} | true && docker rm ${{ env.AUTH_CONTAINER_NAME }} | true
          docker run --detach --restart always --env-file ~/auth.env --name ${{ env.AUTH_CONTAINER_NAME }} --publish 8081:8081 \
            ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.AUTH_REPOSITORY_NAME }}:${{ env.AUTH_IMAGE_NAME }}.${{ github.sha }}
          
          rm -r ~/note.env && touch ~/note.env
          echo "NOTE_ACCESS_TOKEN_SECRET=${{ secrets.NOTE_ACCESS_TOKEN_SECRET }}" >> ~/note.env
          
          echo "NOTE_MONGODB_HOST=${{ secrets.NOTE_MONGODB_HOST }}" >> ~/note.env
          echo "NOTE_MONGODB_PORT=${{ secrets.NOTE_MONGODB_PORT }}" >> ~/note.env
          echo "NOTE_MONGODB_USERNAME=${{ secrets.NOTE_MONGODB_USERNAME }}" >> ~/note.env
          echo "NOTE_MONGODB_PASSWORD=${{ secrets.NOTE_MONGODB_PASSWORD }}" >> ~/note.env
          echo "NOTE_MONGODB_DATABASE=${{ secrets.NOTE_MONGODB_DATABASE }}" >> ~/note.env
          
          docker stop ${{ env.NOTE_CONTAINER_NAME }} | true && docker rm ${{ env.NOTE_CONTAINER_NAME }} | true
          docker run --detach --restart always --env-file ~/note.env --name ${{ env.NOTE_CONTAINER_NAME }} --publish 8081:8081 \
            ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.NOTE_REPOSITORY_NAME }}:${{ env.NOTE_IMAGE_NAME }}.${{ github.sha }}
