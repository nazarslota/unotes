basePath: /api/user
definitions:
  errors.HTTPError:
    properties:
      code:
        type: integer
      message: {}
    type: object
  handler.createUserModel:
    properties:
      email:
        example: example@example.example
        type: string
      password:
        example: password
        maxLength: 64
        minLength: 8
        type: string
      username:
        example: username
        maxLength: 32
        minLength: 4
        type: string
    required:
    - email
    - password
    - username
    type: object
  handler.findUserByIDResult:
    properties:
      email:
        type: string
      id:
        type: string
      password_hash:
        type: string
      username:
        type: string
    type: object
  handler.findUserByUsernameResult:
    properties:
      email:
        type: string
      id:
        type: string
      password_hash:
        type: string
      username:
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  description: User Service - service for saving user data, developed for UNotes(notes
    system).
  title: User Service
  version: "1.0"
paths:
  /create:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: Account info.
        in: body
        name: Input.
        required: true
        schema:
          $ref: '#/definitions/handler.createUserModel'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Create User
      tags:
      - User
  /i/{id}:
    get:
      consumes:
      - application/json
      description: Returns the user by his ID.
      parameters:
      - description: User ID.
        in: path
        name: Input.
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.findUserByIDResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Find User By ID
      tags:
      - User
  /u/{username}:
    get:
      consumes:
      - application/json
      description: Returns the user by username.
      parameters:
      - description: User username.
        in: path
        name: Input.
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.findUserByUsernameResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Find User By Username
      tags:
      - User
swagger: "2.0"
